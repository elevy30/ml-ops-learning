# -*- coding: utf-8 -*-
"""python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PoBFeoNAVwiHq4hz42JrogUUHlwIkNkV
"""

#prime numbers
for num in range(1,100):
    if all(num%i!=0 for i in range(2,num)):
        print(num, end=" ")

#print 2 place after the dot
num=34.765467
print(f"{num:.3f}")

#work with List Set and Tuple
list1 = [1,2,3,4,5]
set1 = {1,2,3,4,4,4,4,5}
tuple1 = (1,2,3,4,5, "hello")
print(list1)
print(set1)
print(tuple1)

#Tuple unpack
first,*middle,last = tuple1
print(first)
print(middle)
print(last)

#Set union,intersection
list2 = set1.intersection(list1)
print(list2)

del list1[1]
print(list1)

#power of 2 for even num in dict
dict = {x:x**2 for x in range(10) if x%2==0}
print(dict)

# is strong password function
def is_strong_password(password):
    if len(password) < 8:
        return False
    if not any(char.islower() for char in password):
        return False
    if not any(char.isupper() for char in password):
        return False
    if not any(char.isdigit() for char in password):
        return False
    if not any(char in "!@#$%^&*()_+" for char in password):
        return False
    return True

print(is_strong_password("Password123"))
print(is_strong_password("Password123!"))

#is a palindrome
def is_palindrome(string):
    return string == string[::-1]

print(is_palindrome("racecar"))
print(is_palindrome("hello"))

#file operation - count freq of each word
def count_word_freq(filename):
    word_freq = {}
    with open(filename, "r") as file:
        for line in file:
            words = line.strip().split()
            for word in words:
                word = word.lower().strip(".,!?()\:;[]'/")
                word_freq[word] = word_freq.get(word, 0) + 1
    return word_freq

print(count_word_freq("sample_data/README.md"))

#lambda function => lambda params:expression
add = lambda a,b: a+b
print(type(add))
print(add(1,2))

#map - apply expression to all item in the list
numbers = [1,2,3,4,5]
squared_numbers = list(map(lambda x: x**2, numbers))
print(squared_numbers)

#filter - apply expression to all item in the list
even_numbers = list(filter(lambda x: x%2==0 and x>5, squared_numbers))
print(even_numbers)

#packages
from math import sqrt
print(sqrt(16))

import numpy as np
np.array([1,2,3])

import os
print(os.getcwd())

with open("sample_data/example.txt", "w") as file:
  file.write("hello")

with open("sample_data/example.txt", "r") as file:
  for line in file:
    print(line.strip())


#get full path of file
print(os.path.abspath("sample_data/example.txt"))
item = os.listdir("sample_data")
print(item)

# prompt: exception hendling

try:
  with open("sample_data/example.txt", "w") as file:
    file.write("hello\n")
    file.write("hello\n")
    file.write("hello\n")
    file.write("hello\n")
    file.write("hello\n")
    file.write("hello\n")


  with open("sample_data/example.txt", "r") as file:
    #count number of lines
    lines = file.readlines()
    print(len(lines))
  with open("sample_data/example.txt", "r") as file:
    for line in file:
      #count number of char
      print(len(line.strip()))
except Exception as e:
  print(f"An error occurred during file operations : {e}")

# get full path of file
try:
    print(os.path.abspath("sample_data/example.txt"))
    item = os.listdir("sample_data")
    print(item)
    print(len(item))
except Exception as e:
    print(f"An error occurred during file path operations : {e}")
finally:
    print("finally")

# prompt: #class

class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        print("Woof!")

    def info(self):
        print(f"Name: {self.name}, Age: {self.age}")

my_dog = Dog("Buddy", 3)
my_dog.bark()
my_dog.info()

from abc import ABC,abstractmethod
#multiple inheritance
#----------------------------------------------
class Animal:
    def __init__(self, name):
        print("run __init__ in Animel")
        self.name = name

    def eat(self):
        print(f"{self.name} is eating.")

    def get_name(self):
        return f"{self.name} from Animal"

    @abstractmethod
    def speak(self):
      pass

#----------------------------------------------
class Flyable:
    def __init__(self, num_of_wing):
        print("run __init__ in Flyable")
        self.num_of_wing = num_of_wing

    def fly(self):
        print(f"{self.name} is flying with {self.num_of_wing} wing.")

    def get_name(self):
        return f"{self.name} from Flyable"

#----------------------------------------------
class Bird(Animal, Flyable):
    def __init__(self, name, num_of_wing):
        print("run __init__ in Bird")
        super().__init__(name)
        Flyable.__init__(self, num_of_wing)

    # def get_name(self):
    #     return f"{self.name} from Bird"
#----------------------------------------------

bird = Bird("Sparrow", 4)
print(bird.get_name())
bird.eat()
bird.fly()


#----------------------------------------------
class Dog(Animal):
    def __init__(self):
        print("run __init__ in Dog")
        super().__init__("Dog")

    def speak(self):
        return "Woof!"

class Cat(Animal):
    def __init__(self):
        print("run __init__ in Cat")
        super().__init__("Cat")

    def speak(self):
        return "Meow!"

def animale_speak(animal):
    print(animal.speak())

dog = Dog()
cat = Cat()
print(dog.speak())
print(cat.speak())
animale_speak(dog)
animale_speak(cat)
#----------------------------------------------

#yield
def my_generator():
    yield 1
    yield 2
    yield 3

for value in my_generator():
    print(value)

#yield reading large file - pages
def read_large_file(filename):
    with open(filename, "r") as file:
        while True:
            data = file.read(100)
            if not data:
                break
            yield data

for page in read_large_file("sample_data/README.md"):
    print("----------------------------------------------------------------------")
    print(page)

#decorator with closures
def outer_function(func):
    def inner_function():
        print("Hello from inner function")
        func()
        print("Goodbye from inner function")
    return inner_function()

@outer_function
def my_func():
    print("RUNNING COMPLECATE FUNCTUINALITY")

#numpy
import numpy as np
a = np.array([1,2,3])
print(a)
print(type(a))

#panda read csv
import json
import pandas as pd
df = pd.read_csv("sample_data/california_housing_test.csv")
# print("----------------------------------------")
# print(df['housing_median_age'][0:10])
# print("----------------------------------------")
# print(df.loc[0])
# print("----------------------------------------")
# print(df.iloc[0][1])
# print("----------------------------------------")
# print(df.at[1,'housing_median_age'])
# print("----------------------------------------")
# df['count_of_g_age']=df.groupby('housing_median_age')['housing_median_age'].transform('count')
# print(df.head(5))
# print(df.tail(5))
# print("----------------------------------------")
# print(df.describe())
# print(df.dtypes)
# print(df.isnull().sum())
# df["total_room_per_age"] = df['housing_median_age'].groupby("housing_median_age").sum("total_rooms")
# print(df1)
# print(df.tail(5))
# df1 = df.groupby(['housing_median_age','median_income'])['total_rooms'].mean()
# print(df1)

df_5 = df.head(2)
print(df_5)
print(json.dumps(json.loads(df_5.to_json()), indent=4))
print(json.dumps(json.loads(df_5.to_json(orient='index')), indent=4))

obj = json.loads(df_5.to_json(orient='records'))
print(json.dumps(obj, indent=4))

